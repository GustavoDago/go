Especializaci칩n en Back End III 
Mesa de trabajo - Clase 14
Ejercitaci칩n grupal
Nivel de complejidad: medio 游댠游댠
Consigna
Un supermercado necesita un sistema para gestionar los productos frescos que tienen publicados en su p치gina web. Para poder hacer esto, necesitan un servidor que ejecute una API que les permita manipular los productos cargados desde distintos clientes. Los campos que conforman un producto son:
Nombre
Tipo de dato
JSON
Tipo de dato
Go
Descripci칩n | Ejemplo
id
number
int
Identificador en conjunto de datos | 15
name
string
string
Nombre caracterizado | Cheese - St. Andre
quantity
number
int
Cantidad almacenada | 60
code_value
string
string
C칩digo alfanum칠rico caracter칤stico | S73191A
is_published
boolean
bool
El producto se encuentra publicado o no |  True
expiration
string
string
Fecha de vencimiento | 12/04/2022
price
number
float64
Precio del producto | 50.15


Con la misma API que ven칤amos trabajando en clase, vamos a resolver los siguientes ejercicios.
Crear una ruta /productparams que tome todos los datos de la estructura de un producto por par치metro y lo devuelva en forma de JSON. Podemos seguir el siguiente ejemplo:

Insertar este 칰ltimo producto a la lista de productos y verificar si lo podemos tomar con la ruta /products/:id (m치s adelante veremos otro m칠todo para insertar datos en nuestras listas o bases de datos).
Se necesita un endpoint que devuelva una lista de productos que est칠n entre ciertas cantidades de stock. Por ejemplo: los productos que tengan entre 300 y 400 unidades. La ruta se llamar치 /searchbyquantity y debemos pasar los l칤mites de las cantidades por par치metro.
Se necesita un endpoint que brinde el detalle de una compra. Por par치metro se deber치 pasar el code_value del producto y la cantidad de unidades a comprar. El detalle de la compra deber치 ser: nombre del producto, cantidad y precio total. La ruta se deber치 llamar /buy.
